// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// linear_solver
arma::mat linear_solver(arma::mat A, arma::mat B);
RcppExport SEXP _RcppWass_linear_solver(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_solver(A, B));
    return rcpp_result_gen;
END_RCPP
}
// quadprog
arma::vec quadprog(arma::mat A, arma::vec b, arma::mat C, arma::vec d, arma::vec lb, arma::vec ub);
RcppExport SEXP _RcppWass_quadprog(SEXP ASEXP, SEXP bSEXP, SEXP CSEXP, SEXP dSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(quadprog(A, b, C, d, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// wasser
Rcpp::List wasser(const arma::mat xfit, const arma::mat q, const arma::mat Q0, const arma::mat xpred, const arma::vec t, const double qdmin);
RcppExport SEXP _RcppWass_wasser(SEXP xfitSEXP, SEXP qSEXP, SEXP Q0SEXP, SEXP xpredSEXP, SEXP tSEXP, SEXP qdminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type xfit(xfitSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Q0(Q0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type xpred(xpredSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type qdmin(qdminSEXP);
    rcpp_result_gen = Rcpp::wrap(wasser(xfit, q, Q0, xpred, t, qdmin));
    return rcpp_result_gen;
END_RCPP
}
// confidence_band
Rcpp::List confidence_band(const arma::mat xfit, const arma::mat xpred, const arma::mat Q_obs, const arma::mat q_obs, const arma::vec t_vec, const double alpha);
RcppExport SEXP _RcppWass_confidence_band(SEXP xfitSEXP, SEXP xpredSEXP, SEXP Q_obsSEXP, SEXP q_obsSEXP, SEXP t_vecSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type xfit(xfitSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type xpred(xpredSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Q_obs(Q_obsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type q_obs(q_obsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type t_vec(t_vecSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(confidence_band(xfit, xpred, Q_obs, q_obs, t_vec, alpha));
    return rcpp_result_gen;
END_RCPP
}
// nadayara_pred
Rcpp::List nadayara_pred(const arma::mat distancias, const arma::mat X, const arma::mat t, const arma::mat Y, const arma::mat hs);
RcppExport SEXP _RcppWass_nadayara_pred(SEXP distanciasSEXP, SEXP XSEXP, SEXP tSEXP, SEXP YSEXP, SEXP hsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type distancias(distanciasSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type hs(hsSEXP);
    rcpp_result_gen = Rcpp::wrap(nadayara_pred(distancias, X, t, Y, hs));
    return rcpp_result_gen;
END_RCPP
}
// nadayara_reg
Rcpp::List nadayara_reg(const arma::mat X, const arma::mat t, const arma::mat Y, const arma::mat hs, const arma::umat indices_1, const arma::umat indices_2);
RcppExport SEXP _RcppWass_nadayara_reg(SEXP XSEXP, SEXP tSEXP, SEXP YSEXP, SEXP hsSEXP, SEXP indices_1SEXP, SEXP indices_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type hs(hsSEXP);
    Rcpp::traits::input_parameter< const arma::umat >::type indices_1(indices_1SEXP);
    Rcpp::traits::input_parameter< const arma::umat >::type indices_2(indices_2SEXP);
    rcpp_result_gen = Rcpp::wrap(nadayara_reg(X, t, Y, hs, indices_1, indices_2));
    return rcpp_result_gen;
END_RCPP
}
// eucdistance1
arma::mat eucdistance1(arma::mat X, arma::mat t);
RcppExport SEXP _RcppWass_eucdistance1(SEXP XSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(eucdistance1(X, t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppWass_linear_solver", (DL_FUNC) &_RcppWass_linear_solver, 2},
    {"_RcppWass_quadprog", (DL_FUNC) &_RcppWass_quadprog, 6},
    {"_RcppWass_wasser", (DL_FUNC) &_RcppWass_wasser, 6},
    {"_RcppWass_confidence_band", (DL_FUNC) &_RcppWass_confidence_band, 6},
    {"_RcppWass_nadayara_pred", (DL_FUNC) &_RcppWass_nadayara_pred, 5},
    {"_RcppWass_nadayara_reg", (DL_FUNC) &_RcppWass_nadayara_reg, 6},
    {"_RcppWass_eucdistance1", (DL_FUNC) &_RcppWass_eucdistance1, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppWass(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
